{"version":3,"sources":["components/card/card.jsx","components/board/board.jsx","deck.js","components/gameover/gameover.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","src","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","GameOver","restartGame","App","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","useEffect","resizeBoard","preloadImages","join","resizeListener","window","addEventListener","removeEventListener","console","log","Image","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","isGameOver","setTimeout","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b92c1913.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './card.css';\n\nfunction Card({handleClick, id, type, flipped, solved, height, width, disabled}) {\n  return <div\n    className={`flip-container ${flipped ? 'flipped' : ''}`}\n    style={{width, height}}\n    onClick={() => disabled ? null : handleClick(id)}\n  >\n    <div className='flipper'>\n      <img\n        style={{height, width}}\n        className={flipped ? 'front' : 'back'}\n        src={flipped || solved ? `${type}.jpg` : 'back.png'}\n      />\n    </div>\n  </div>\n}\n\nCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  solved: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired\n}\n\nexport default Card;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../card/card';\nimport './board.css';\n\nfunction Board({disabled, dimension, cards, flipped, solved, handleClick}) {\n  return <div className=\"board\">\n    {cards.map((card) => (\n      <Card\n        key={card.id}\n        id={card.id}\n        type={card.type}\n        width={dimension / 5.5}\n        height={dimension / 5.5}\n        flipped={flipped.includes(card.id)}\n        solved={solved.includes(card.id)}\n        handleClick={handleClick}\n        disabled={disabled || solved.includes(card.id)}\n      />\n    ))}\n  </div>\n}\n\nBoard.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  dimension: PropTypes.number.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired\n}\n\nexport default Board;","function shuffle(array) {\n  const _array = array.slice(0);\n  for (let i = 0; i < array.length; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temp = _array[i];\n    _array[i] = _array[randomIndex];\n    _array[randomIndex] = temp;\n  }\n  return _array;\n}\n\nexport default function initializeDeck() {\n  let id = 0;\n  const cards = ['img1', 'img2', 'img3', 'img4', 'img5', 'img6', 'img7', 'img8'].reduce((acc, type) => {\n    acc.push({\n      id: id++,\n      type\n    })\n    acc.push({\n      id: id++,\n      type\n    })\n    return acc;\n  }, []);\n  return shuffle(cards);\n}","import React from 'react';\nimport './gameover.css'\n\nconst GameOver = ({ restartGame }) => (\n  <div className=\"justify-center\">\n    <h1>YOU WIN!</h1>\n    <button className=\"restart-button\" onClick={restartGame}>Restart Game</button>\n  </div>\n);\n\nexport default GameOver;","import React, {useState, useEffect} from 'react';\nimport Board from './components/board/board';\nimport initializeDeck from './deck';\nimport GameOver from './components/gameover/gameover';\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    resizeBoard() \n    setCards(initializeDeck())\n  }, []);\n\n  useEffect(() => {\n    preloadImages()\n  }, [cards.join(\",\")]) \n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n    } else {\n      if (sameCardClicked(id)) {\n        setDisabled(false)\n        return\n      }\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 1500)\n      }\n    }\n  }\n\n  const preloadImages = () => {\n    cards.map((card) => {\n      const src = `${card.type}.jpg`\n      console.log(src)\n      new Image().src = src\n    })\n  }\n\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      ),\n    )\n  }\n\n  const restartGame = () => {\n    setSolved([])\n    setDisabled(false)\n    setFlipped([])\n    setCards(initializeDeck())\n  }\n\n  const isGameOver = solved.length === 16 && flipped.length === 0\n  \n  return (\n    <div>\n      {isGameOver ? <GameOver restartGame={restartGame} /> : \n      <h2 className='title'>Match The Pictures</h2>}\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}